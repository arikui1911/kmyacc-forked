/* -*-d-*-  Prototype file of KM-yacc parser for D.
 *
 * Written by arikui <arikui.ruby _at_ gmail.com>
 *
 * This file is PUBLIC DOMAIN.
 */

$semval($)     yyval
$semval($,%t)  yyval.%t
$semval(%n)    yyastk[yysp-(%l-%n)]
$semval(%n,%t) yyastk[yysp-(%l-%n)].%t

$include;

module $(CLASSNAME);

$if -t
static if (!__traits(compiles, std.stdio)) import std.stdio;
$endif

$if %union
union YYSTYPE
$union
$endif
$ifnot %union
alias int YYSTYPE
$endif

$tokenval
immutable %s = %n;
$endtokenval

public class Parser {
    /*
    #define yyclearin (yychar = -1)
    #define yyerrok (yyerrflag = 0)
    #define YYRECOVERING (yyerrflag != 0)
    #define YYERROR  goto yyerrlab
    */

    static  bool yydebug = false;
    private YYSTYPE yylval;     // lexical element object
    private YYSTYPE yyval;      // Semantic value
    private YYSTYPE yyastk[];   // Semantic stack
    private short yysstk[];     // Syntax stack
    private int yysp;           // Stack pointer
    private int yyerrflag;      // Error handling state
    private int yychar;         // lookahead token

    this(){}

    $tailcode;

$if -t
    /* Dump Parse Tree Flag */
    static bool yyDumpParseTree = false;

    /* Dense Tree */
    static bool yydense = false;

    /** Parse Tree **/
    public static abstract class YYParseTree {
        public void prettyPrint(File output) {
            prettyPrintX(output, "", true);
        }

        abstract void prettyPrintX(File output, string head, bool last);
    }

    /** YYNode represents nonterminal symbol. **/
    public static class YYNode : YYParseTree {
        int id;
        int nkids;
        YYParseTree[] kids;

        this(int id, YYParseTree[] stack, int from, int len) {
            this.id = id;
            nkids = len;
            kids = new YYParseTree[len];
            for (int i = 0; i < len; i++) kids[i] = stack[from + i];
        }

        void appendKids(YYParseTree[] stack, int from, int len) {
            if (nkids + len > kids.length) {
                int size = kids.length * 2;
                if (size < nkids + len) size = nkids + len;
                YYParseTree[] a = new YYParseTree[size];
                for (int i = 0; i < nkids; i++) a[i] = kids[i];
                kids = a;
            }
            for (int i = 0; i < len; i++) kids[nkids + i] = stack[from + i];
            nkids += len;
        }

        override void prettyPrintX(File output, string head, bool last) {
            auto head2 = head;
            if (head.length != 0) {
                if (last) {
                    head2 = head ~ " +-"; /* L */
                } else {
                    head2 = head ~ " +-"; /* T-rotated-left */
                }
            }
            output.writeln(head2 ~ yynonterms[id]);
            head ~= last ? "   " : " | ";
            for (int i = 0; i < nkids; i++) {
                if (!yydense) output.writefln("%s | ", head);
                if (i + 1 != nkids) {
                    kids[i].prettyPrintX(output, head, false);
                } else {
                    kids[i].prettyPrintX(output, head, true);
                }
            }
        }

        override public string toString() {
            import std.string;
            import std.algorithm;

            return "(%s %s)".format(yynonterms[id], kids.map!(x => x.toString()).join(" "));
        }
    }

    /** YYLeaf represents terminal symbol. **/
    public static class YYLeaf : YYParseTree {
        int id;
        YYSTYPE value;

        this(int id) {
            this.id = id;
        }

        this(int id, YYSTYPE value) {
            this(id);
            this.value = value;
        }

        override void prettyPrintX(File output, string head, bool last) {
            auto head2 = head;
            if (head.length != 0) {
                if (last) {
                    head2 = head ~ " +-"; /* L */
                } else {
                    head2 = head ~ " +-"; /* T-rotated-left */
                }
            }
            output.writeln(head2 ~ toString());
        }

        override public string toString() {
            return "%s[%f]".format(yyterminals[id], value.number);
        }
    }

    private YYParseTree[] yyPTStack; // Parse Tree Stack

    private static final string yyterminals[] = [
        $listvar terminals
        , "???"
    ];

    private static final string yynonterms[] = [
        $listvar nonterminals
    ];

    private string yytokname(int n) {
        switch (n) {
        $switch-for-token-name;
        default:
            return "???";
        }
    }

    private static final string yyproduction[] = [
        $production-strings;
    ];

    /* Traditional Debug Mode */
    private void YYTRACE_NEWSTATE(int state, int sym) {
        if (!yydebug) return;
        "%% State %d, Lookahead %s".writefln(state, (sym < 0 ? "--none--" : yyterminals[sym]));
    }

    private void YYTRACE_READ(int sym) {
        if (!yydebug) return;
        "%% Reading %s".writefln(yyterminals[sym]);
    }

    private void YYTRACE_SHIFT(int sym) {
        if (!yydebug) return;
        "%% Shift %s".writefln(yyterminals[sym]);
    }

    private void YYTRACE_ACCEPT() {
        if (!yydebug) return;
        "%% Accepted.".writeln();
    }

    private void YYTRACE_REDUCE(int n) {
        if (!yydebug) return;
        "%% Reduce by (%s) ".writefln(yyproduction[n]);
    }

    private void YYTRACE_POP(int state) {
        if (!yydebug) return;
        "%% Recovering, uncovers state %d".writefln(state);
    }

    private void YYTRACE_DISCARD(int sym) {
        if (!yydebug) return;
        "%% Discard %s".writefln(yyterminals[sym]);
    }
$endif

    private static final $TYPEOF(yytranslate)[] yytranslate = [
        $listvar yytranslate
    ];

    private static final int YYBADCH = $(YYBADCH);
    private static final int YYMAXLEX = $(YYMAXLEX);
    private static final int YYTERMS = $(YYTERMS);
    private static final int YYNONTERMS = $(YYNONTERMS);

    private static final short[] yyaction = [
        $listvar yyaction
    ];

    private static final int YYLAST = $(YYLAST);

    private static final $TYPEOF(yycheck)[] yycheck = [
        $listvar yycheck
    ];

    private static final short[] yybase = [
        $listvar yybase
    ];

    private static final int YY2TBLSTATE = $(YY2TBLSTATE);

    private static final short[] yydefault = [
        $listvar yydefault
    ];

    private static final short[] yygoto = [
        $listvar yygoto
    ];

    private static final int YYGLAST = $(YYGLAST);

    private static final $TYPEOF(yygcheck)[] yygcheck = [
        $listvar yygcheck
    ];

    private static final short[] yygbase = [
        $listvar yygbase
    ];

    private static final short[] yygdefault = [
        $listvar yygdefault
    ];

    private static final $TYPEOF(yylhs)[] yylhs = [
        $listvar yylhs
    ];

    private static final $TYPEOF(yylen)[] yylen = [
        $listvar yylen
    ];

    private static final int YYSTATES = $(YYSTATES);
    private static final int YYNLSTATES = $(YYNLSTATES);
    private static final int YYINTERRTOK = $(YYINTERRTOK);
    private static final int YYUNEXPECTED = $(YYUNEXPECTED);
    private static final int YYDEFAULT = $(YYDEFAULT);
$if -a
$reduce
    private void yyact%n() {
        %b
    }
$endreduce
$endif

    private static final int YYDEFAULTSTACK = 512;

    // Grow syntax and sematic stacks
    private void growStack() {
        auto tmpsstk = new short[yysp * 2];
        auto tmpastk = new YYSTYPE[yysp * 2];
        for (int i = 0; i < yysp; i++) {
            tmpsstk[i] = yysstk[i];
            tmpastk[i] = yyastk[i];
        }
        yysstk = tmpsstk;
        yyastk = tmpastk;
    }

    // Parser entry point
    int yyparse() {
        int yyn;
        int yyp;
        int yyl;

        yyastk = new YYSTYPE[YYDEFAULTSTACK];
        yysstk = new short[YYDEFAULTSTACK];
$if -t
        if (yyDumpParseTree) yyPTStack = new YYParseTree[YYDEFAULTSTACK];
$endif

        int yystate = 0;
        int yychar1 = yychar = -1;

        yysp = 0;
        yysstk[yysp] = 0;
        yyerrflag = 0;
        for (;;) {
$if -t
            YYTRACE_NEWSTATE(yystate, yychar1);
$endif
            if (yybase[yystate] == 0) {
                yyn = yydefault[yystate];
            } else {
                if (yychar < 0) {
                    if ((yychar = yylex()) <= 0) yychar = 0;
                    yychar1 = yychar < YYMAXLEX ? yytranslate[yychar] : YYBADCH;
$if -t
                    YYTRACE_READ(yychar1);
$endif
            }

            if (((yyn = yybase[yystate] + yychar1) >= 0
                 && yyn < YYLAST && yycheck[yyn] == yychar1
                 || (yystate < YY2TBLSTATE
                     && (yyn = yybase[yystate + YYNLSTATES] + yychar1) >= 0
                     && yyn < YYLAST && yycheck[yyn] == yychar1))
                && (yyn = yyaction[yyn]) != YYDEFAULT) {
                /*
                 * >= YYNLSTATE: shift and reduce
                 * > 0: shift
                 * = 0: accept
                 * < 0: reduce
                 * = -YYUNEXPECTED: error
                 */
                if (yyn > 0) {
                    /* shift */
$if -t
                    YYTRACE_SHIFT(yychar1);
$endif
                    if (++yysp >= yysstk.length) growStack();

                    yysstk[yysp] = cast(short)(yystate = yyn);
                    yyastk[yysp] = yylval;
$if -t
                    if (yyDumpParseTree) yyPTStack[yysp] = new YYLeaf(yychar1, yylval);
$endif
                    yychar1 = yychar = -1;

                    if (yyerrflag > 0) yyerrflag--;
                    if (yyn < YYNLSTATES) continue;

                    /* yyn >= YYNLSTATES means shift-and-reduce */
                    yyn -= YYNLSTATES;
                } else {
                    yyn = -yyn;
                }
            } else {
                yyn = yydefault[yystate];
            }
        }

        for (;;) {
            /* reduce/error */
            if (yyn == 0) {
                /* accept */
$if -t
                YYTRACE_ACCEPT();
                if (yyDumpParseTree) {
                    yyPTStack[yysp].prettyPrint(stdout);
                    stdout.flush();
                }
$endif
                return 0;
            }

            bool yyparseerror = true;
            if (yyn != YYUNEXPECTED) {
                /* reduce */
                yyparseerror = false;
                yyl = yylen[yyn];
                yyval = yyastk[yysp-yyl+1];
$if -t
                YYTRACE_REDUCE(yyn);
$endif
	            int yylrec = 0;
                /* Following line will be replaced by reduce actions */
$if -a
                switch(yyn) {
$reduce
                case %n:
                    yyact%n();
                    break;
$endreduce
                }
$endif
$ifnot -a
                switch(yyn) {
$reduce
                case %n:
                    {
                        %b
                    }
                    break;
$endreduce
                default:
                    break;
                }
$endif
	            if (!yyparseerror) {
$if -t
                    if (yyDumpParseTree) {
                        if (yylrec != 0)
                            (cast(YYNode)yyPTStack[yysp-yyl+1]).appendKids(yyPTStack, yysp-yyl+2, yyl-1);
                        else
                            yyPTStack[yysp-yyl+1] = new YYNode(yylhs[yyn], yyPTStack, yysp-yyl+1, yyl);
                    }
$endif
                    /* Goto - shift nonterminal */
                    yysp -= yyl;
                    yyn = yylhs[yyn];
                    if ((yyp = yygbase[yyn] + yysstk[yysp]) >= 0 && yyp < YYGLAST && yygcheck[yyp] == yyn)
                        yystate = yygoto[yyp];
                    else
                        yystate = yygdefault[yyn];

                    if (++yysp >= yysstk.length) growStack();

                    yysstk[yysp] = cast(short)yystate;
                    yyastk[yysp] = yyval;
                }
            }

            if (yyparseerror) {
                /* error */
                switch (yyerrflag) {
                case 0:
                    yyerror("syntax error");
                case 1:
                case 2:
                    yyerrflag = 3;
                    /* Pop until error-expecting state uncovered */

                    while (!((yyn = yybase[yystate] + YYINTERRTOK) >= 0
                             && yyn < YYLAST && yycheck[yyn] == YYINTERRTOK
                             || (yystate < YY2TBLSTATE
                                 && (yyn = yybase[yystate + YYNLSTATES] + YYINTERRTOK) >= 0
                                 && yyn < YYLAST && yycheck[yyn] == YYINTERRTOK))) {
                        if (yysp <= 0) return 1;
                        yystate = yysstk[--yysp];
$if -t
                        YYTRACE_POP(yystate);
$endif
                    }
                    yyn = yyaction[yyn];
$if -t
                    YYTRACE_SHIFT(YYINTERRTOK);
$endif
                    yysstk[++yysp] = cast(short)(yystate = yyn);
$if -t
                    if (yyDumpParseTree) yyPTStack[yysp] = new YYLeaf(YYINTERRTOK);
$endif
                    break;

                case 3:
$if -t
                    YYTRACE_DISCARD(yychar1);
$endif
                    if (yychar1 == 0) return 1;
            	    yychar1 = yychar = -1;
                    break;
                default:
                    break;
                }
            }

            if (yystate < YYNLSTATES) break;
            /* >= YYNLSTATES means shift-and-reduce */
            yyn = yystate - YYNLSTATES;
        }
    }
}

}

